@using System.Collections
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var song = ViewBag.SongDetails as ArrayList;

    // Extract song details from the ArrayList
    string songTitle = song != null && song.Count > 1 ? song[1]?.ToString() : "Unknown Title";
    string artistName = song != null && song.Count > 6 ? song[6]?.ToString() : "Unknown Artist";
    string fileUrl = song != null && song.Count > 2 ? song[2]?.ToString() : "#";
    string imageUrl = song != null && song.Count > 3 ? song[3]?.ToString() : "default.jpg";
    string albumTitle = song != null && song.Count > 4 ? song[4]?.ToString() : "Unknown Album";
    string genreName = song != null && song.Count > 5 ? song[5]?.ToString() : "Unknown Genre";

    // Get the playlist and related songs
    var playlist = ViewBag.Playlist ?? new ArrayList();
    var relatedSongs = ViewBag.RelatedSongs ?? new ArrayList();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@songTitle - NhacCuaTui</title>
    <link href="~/css/Core/PlaySong.css" rel="stylesheet" />
</head>
<body>
    <div class="song-info">
        <div class="song-image">
            <img src="~/Image/Data/@imageUrl" alt="@songTitle">
        </div>
        <div class="song-details">
            <div class="song-title">@songTitle</div>
            <div class="artist">@artistName</div>
            <div class="actions">
                <a href="#">Chia sẻ</a>
                <a href="#">Nhạc chờ</a>

                @if (Session["Username"] != null)
                {
                    <a href="javascript:void(0);"
                       onclick="showPlaylistDropdownDirect(@song[0])">Thêm vào Playlist</a>

                    <div class="playlist-dropdown" id="playlist-dropdown-direct-@song[0]" style="display: none;">
                        <select id="playlist-select-direct-@song[0]">
                            <option value="">Select Playlist</option>
                        </select>
                        <button onclick="addToPlaylistDirect(@song[0])">Add</button>
                    </div>

                    <!-- Like Button -->
                    <a href="javascript:void(0);"
                       id="like-button-@song[0]"
                       data-liked="@ViewBag.IsLiked"
                       onclick="toggleLike(@song[0])">
                        <span id="like-text-@song[0]">
                            @(ViewBag.IsLiked ? "Đã Thích" : "Thích") <!-- Display initial text based on ViewBag.IsLiked -->
                        </span>
                    </a>


                }
            </div>

            <audio controls class="audio-player">
                <source src="~/Audio/@fileUrl" type="audio/mpeg" />
                Trình duyệt của bạn không hỗ trợ phát nhạc.
            </audio>
        </div>
    </div>

    <div class="playlist-section">
        <div class="section-title">PLAYLIST | ALBUM</div>
        <div class="playlist-grid">
            @foreach (ArrayList item in playlist)
            {
                string playlistImage = item.Count > 2 ? item[2]?.ToString() : "default.jpg";
                string playlistTitle = item.Count > 1 ? item[1]?.ToString() : "Unknown Title";
                string playlistArtist = item.Count > 3 ? item[3]?.ToString() : "Unknown Artist";

                <div class="playlist-item">
                    <img src="~/Image/Data/@playlistImage" alt="@playlistTitle">
                    <div class="playlist-item-title">@playlistTitle</div>
                    <div class="playlist-item-artist">@playlistArtist</div>
                </div>
            }
        </div>
    </div>

    <div class="related-songs-section">
        <div class="section-title">BÀI HÁT CÙNG THỂ LOẠI</div>
        <div class="related-songs-list">
            @foreach (ArrayList relatedSong in relatedSongs)
            {
                string relatedSongTitle = relatedSong.Count > 1 ? relatedSong[1]?.ToString() : "Unknown Title";
                string relatedSongArtist = relatedSong.Count > 2 ? relatedSong[2]?.ToString() : "Unknown Artist";
                int relatedSongId = Convert.ToInt32(relatedSong[0]);

                <div class="related-song">
                    <div class="related-song-line">
                        <div class="related-song-details">
                            <span class="related-song-title">@relatedSongTitle</span>
                            <a href="#" class="related-song-artist">@relatedSongArtist</a>
                        </div>
                        <div class="related-song-actions">
                            <a href="@Url.Action("PlaySong", "PlaySong", new { id = relatedSongId })" class="play-action">Play ▶</a>
                            @if (Session["Username"] != null)
                            {
                                <div class="playlist-dropdown" id="playlist-dropdown-@relatedSongId" style="display: none;">
                                    <select id="playlist-select-@relatedSongId">
                                        <option value="">Select Playlist</option>
                                    </select>
                                    <button onclick="addToPlaylist(@relatedSongId)">Add</button>
                                </div>
                                <a href="javascript:void(0);"
                                   class="add-action"
                                   onclick="showPlaylistDropdown(@relatedSongId)">Add to Playlist +</a>
                            }
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>
    <script>
    function showPlaylistDropdown(songId) {
        const dropdown = document.getElementById(`playlist-dropdown-${songId}`);
        const select = document.getElementById(`playlist-select-${songId}`);

        if (select.options.length === 1) { // Only fetch playlists if not already loaded
            fetch('@Url.Action("GetUserPlaylists", "PlaySong")')
                .then(response => response.json())
                .then(data => {
                    console.log("Fetched playlists:", data); // Debugging
                    if (data.success) {
                        data.playlists.forEach(playlist => {
                            const option = document.createElement("option");
                            option.value = playlist.PlaylistID;
                            option.textContent = playlist.Name;
                            select.appendChild(option);
                        });
                    } else {
                        alert("Failed to fetch playlists.");
                    }
                })
                .catch(error => console.error("Error fetching playlists:", error));
        }

        dropdown.style.display = "block";
    }

    function addToPlaylist(songId) {
        const playlistSelect = document.getElementById(`playlist-select-${songId}`);
        const playlistId = playlistSelect.value;

        if (!playlistId) {
            alert("Please select a playlist first.");
            return;
        }

        fetch('@Url.Action("AddToPlaylist", "PlaySong")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ songId: songId, playlistId: playlistId })
        })
            .then(response => response.json())
            .then(data => {
                console.log("Add response:", data); // Debugging
                if (data.success) {
                    alert(data.message); // Song added successfully
                } else {
                    alert(data.message); // Handle errors
                }
            })
            .catch(error => {
                console.error("Error adding song to playlist:", error);
            });
    }

    function showPlaylistDropdownDirect(songId) {
        const dropdown = document.getElementById(`playlist-dropdown-direct-${songId}`);
        const select = document.getElementById(`playlist-select-direct-${songId}`);

        if (select.options.length === 1) { // Only fetch playlists if not already loaded
            fetch('@Url.Action("GetUserPlaylists", "PlaySong")')
                .then(response => response.json())
                .then(data => {
                    console.log("Fetched playlists for direct:", data); // Debugging
                    if (data.success) {
                        data.playlists.forEach(playlist => {
                            const option = document.createElement("option");
                            option.value = playlist.PlaylistID;
                            option.textContent = playlist.Name;
                            select.appendChild(option);
                        });
                    } else {
                        alert("Failed to fetch playlists.");
                    }
                })
                .catch(error => console.error("Error fetching playlists:", error));
        }

        dropdown.style.display = "block";
    }

    function addToPlaylistDirect(songId) {
        const playlistSelect = document.getElementById(`playlist-select-direct-${songId}`);
        const playlistId = playlistSelect.value;

        if (!playlistId) {
            alert("Please select a playlist first.");
            return;
        }

        fetch('@Url.Action("AddToPlaylist", "PlaySong")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ songId: songId, playlistId: playlistId })
        })
        .then(response => response.json())
        .then(data => {
            console.log("Add response for direct:", data); // Debugging
            if (data.success) {
                alert(data.message); // Song added successfully
            } else {
                alert(data.message); // Handle errors
            }
        })
        .catch(error => {
            console.error("Error adding song to playlist:", error);
        });
    }

    function toggleLike(songId) {
        const likeButton = document.getElementById(`like-button-${songId}`);
        const likeText = document.getElementById(`like-text-${songId}`);

        // Get the current like state from the data attribute
        const isLiked = likeButton.getAttribute("data-liked") === "true";

        // Make the AJAX call to toggle the like status
        fetch('@Url.Action("ToggleLike", "PlaySong")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ songId: songId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update the like state and the button text
                if (data.isLiked) {
                    likeButton.setAttribute("data-liked", "true");
                    likeText.textContent = "Đã Thích"; // Song is liked
                } else {
                    likeButton.setAttribute("data-liked", "false");
                    likeText.textContent = "Thích"; // Song is unliked
                }
            } else {
                alert(data.message); // Show error message if any
            }
        })
        .catch(error => {
            console.error("Error toggling like:", error);
        });
    }






    </script>


</body>
</html>
